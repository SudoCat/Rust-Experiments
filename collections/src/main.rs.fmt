use std::collections::HashMap;

fn main() {
    examples()
    averages()
}

fn examples() {
    // Vec
    let mut v: Vec<i32> = Vec::new();
    let v2 = vec![1, 2, 3];

    v.push(5);
    v.push(6);
    
    let third: &i32 = &v[2];
    let fourth: Option<&i32> = v.get(2);

    // Strings
    let mut s = String::new();

    let data = "initial contents";

    let s2 = data.to_string();

    // the method also works on a literal directly:
    let s3 = "initial contents".to_string();

    let s4 = String::from("initial contents");

    let mut s5 = String::from("foo");
    s5.push_str("bar");

    let mut s6 = String::from("foo");
    let s7 = String::from("bar");
    s6.push_str(&s7);

    let mut s8 = String::from("lo");
    s8.push('l');

    // hashmaps
    let mut scores = HashMap::new();

    scores.insert(String::from("Blue"), 10);
    scores.insert(String::from("Yellow"), 50);

    // Create a hashmap from two vectors
    let teams  = vec![String::from("Blue"), String::from("Yellow")];
    let initial_scores = vec![10, 50];

    // Underscores let the compiler infer the type from the input
    let scores2: HashMap<_, _> = teams.iter().zip(initial_scores.iter()).collect();

    // Hashmaps and ownership
    let field_name = String::from("Favorite color");
    let field_value = String::from("Blue");

    let mut map = HashMap::new();
    map.insert(field_name, field_value);
    // field_name and field_value are invalid at this point

    // Access value by key
    let team_name = String::from("Blue");
    let score = scores2.get(&team_name);
    // score == Some(&10);

    // Access by iterator
    for (key, value) in &mut scores {
        println!("{}: {}", key, value);
    }

    // Overwrite a value
    scores.insert(String::from("Blue"), 10);

    // Insert if not exists - also returns value
    scores.entry(String::from("Blue")).or_insert(50);

    // Update value based on previous value
    let text = "hello world wonderful world";

    let mut map = HashMap::new();

    for word in text.split_whitespace() {
        let count = map.entry(word).or_insert(0);
        *count += 1;
    }

    println!("{:?}", map);
}

fn averages() {
    let vec = vec![10, 5, 12, 15, 12, 3, 5, 1, 3, 5, 7, 8, 15, 11, 10, 9, 6, 3, 7, 5, 4, 3, 2, 1, 0, 9, 5, 7, 9, 3, 4];
}